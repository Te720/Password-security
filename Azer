#! /bin/python

import os
import sys
import base64
from hashlib import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import *

if not os.path.exists("key"):
   open("key", "wb").write(pbkdf2_hmac("sha256", password=b'thisiswhat', salt=b'', iterations=100000, dklen=32))
key = open("key", "rb").read()
for n in range(1, len(sys.argv)):
 with open("Ye", "rb") as fi:
  for line in fi:
    if os.path.basename(sys.argv[n].encode()) in line:
      pass_hash = base64.b64decode(line.split(b':')[1].strip(b'\n'))
 with open("Y", "rb") as file:
  for lin in file:                                                                                                                                          if os.path.basename(sys.argv[n].encode()) in lin:
      cipher = AES.new(key, AES.MODE_CBC, iv=base64.b64decode(lin.split(b':')[1].strip(b'\n')))
 print(unpad(cipher.decrypt(pass_hash), AES.block_size).decode())


ciphe = AES.new(key, AES.MODE_CBC)
 with open("Ye", "a") as f:
   f.write(os.path.basename(sys.argv[n])) + f.write(":")
 with open("Y", "a") as fv:
   fv.write(os.path.basename(sys.argv[n])) + fv.write(":")
 with open("Ye", "ab") as fb:
   fb.write(cipher.encrypt(pad(base64.b64encode(ciphe)), AES.block_size)) + fb.write(b'\n')
 with open("Y", "ab") as fbv:
   fbv.write(base64.b64encode(ciphe.iv) + fbv.write(b'\n')
